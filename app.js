var fs 			 = require('fs');var express  = require('express');var app 		 = express();var http 		 = require('http');var server 	 = http.createServer(app);var io 			 = require('socket.io').listen(server);var mysql    = require('mysql');var pool    =    mysql.createPool({      connectionLimit   :   100,      host              :   'localhost',      user              :   'root',      password          :   'root',      database          :   'carbeep',      port              :    8889,      debug             :    false});app.use(express.static(__dirname + '/public'));app.get('/socket.io/socket.io.js', function (req, res){		res.sendfile(__dirname + 	 			'/node_modules/socket.io/node_modules/socket.io-client/dist/socket.io.js');});// **** CONNETION TO THE SOCKET io.on('connection', function(socket){           socket.on('newReq',function(data){                 //console.log(data.email +'-'+ data.password);               //console.log(socket.id);                /* Connection to Mysql DB, throw err if connection fails */              pool.getConnection(function(err,connection){              if (err) {                connection.release();                console.log("echec");                return;              }               /* find email and password in table user, to avoid injection we use ? as parameter               Parse data.email to variable key and inject it in query */                        var key = data.email;            var LogQuery = "SELECT * FROM `user` WHERE email = ? ";             connection.query(LogQuery,[key],function(err,rows){                if (err)  throw err ;                if (rows.length == 0){                  socket.emit('ResponseTonewReq',{ status:false, greeting:"email not correct", text: ""});                 }else {                      for (i in rows){                        console.log (rows[i].name+'-'+rows[i].lastname);                         var Username = rows[i].name+' '+rows[i].lastname ;                         var passAttempt = rows[i].encryptedPassword;                             }                         var Passwords = require('machinepack-passwords');                            // Compare a plaintext password attempt against an already-encrypted version.                            Passwords.checkPassword({                            passwordAttempt: data.password,                            encryptedPassword: passAttempt,                            }).exec({                                // An unexpected error occurred.                                error: function (err){                                 console.log('inexpected error');                                },                                // Password attempt does not match already-encrypted version                                incorrect: function (){                                 console.log('not found');                                  socket.emit('ResponseTonewReq',{status:false, greeting:"password not correct", text: ""});                                 },                                // OK.                                success: function (){                                 console.log('it works');                                 socket.emit('ResponseTonewReq',{ status:true, greeting:Username, text: "welcome"});                                },                            });                         connection.release();                      if(!err) {                      // socket.emit('re-hi',{greeting:Username, text: "welcome"});                        console.log('donn√© transferer');                      }                    }                 });            });          });         socket.on('greg',function(data){        console.log(data.message);        socket.emit('re-greg','welcom greg');       // socket.broadcast.to(id).emit('my message', msg);        });                socket.on('disconnect', function(){          console.log('user disconnected');        });                socket.on('host', function(data){           	socket.emit('back' , {message: "hi Alain" });        });});server.listen(3100, function() {	console.log("server starting on port 3100");});